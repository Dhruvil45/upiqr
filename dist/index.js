var l=Object.defineProperty,y=Object.defineProperties;var R=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var w=Object.prototype.hasOwnProperty,P=Object.prototype.propertyIsEnumerable;var p=(n,t,i)=>t in n?l(n,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):n[t]=i,r=(n,t)=>{for(var i in t||(t={}))w.call(t,i)&&p(n,i,t[i]);if(u)for(var i of u(t))P.call(t,i)&&p(n,i,t[i]);return n},f=(n,t)=>y(n,R(t));var m=(n,t,i)=>new Promise((o,a)=>{var d=e=>{try{s(i.next(e))}catch(c){a(c)}},I=e=>{try{s(i.throw(e))}catch(c){a(c)}},s=e=>e.done?o(e.value):Promise.resolve(e.value).then(d,I);s((i=i.apply(n,t)).next())});import g from"qrcode";var h=class{constructor(){this.config={currency:"INR",outputType:"dataURL"}}set(t){return this.config=r(r({},this.config),t),this}setOptions(t){return this.config=r(r({},this.config),t),this}_validateConfig(){if(!this.config.upiId||!this.config.name)throw new Error("UPI ID (upiId) and Payee Name (name) are mandatory.");if(!/^[a-zA-Z0-9.\-_]{2,256}@[a-zA-Z]{2,64}$/.test(this.config.upiId))throw new Error("Invalid UPI ID format. It should be like 'user@bank'.");if(this.config.amount&&(isNaN(this.config.amount)||this.config.amount<=0))throw new Error("Amount must be a positive number.")}getIntent(){this._validateConfig();let t=new URLSearchParams({pa:this.config.upiId,pn:this.config.name});return this.config.amount&&t.set("am",this.config.amount.toFixed(2)),this.config.minimumAmount&&t.set("mam",this.config.minimumAmount.toFixed(2)),this.config.currency&&t.set("cu",this.config.currency),this.config.payeeMerchantCode&&t.set("mc",this.config.payeeMerchantCode),this.config.transactionId&&t.set("tid",this.config.transactionId),this.config.transactionRef&&t.set("tr",this.config.transactionRef),this.config.transactionNote&&t.set("tn",this.config.transactionNote),`upi://pay?${t.toString()}`}generate(){return m(this,null,function*(){let t=this.getIntent(),i={margin:this.config.margin,width:this.config.width,color:this.config.color,errorCorrectionLevel:this.config.errorCorrectionLevel||"M"};try{let o;switch(this.config.outputType||"dataURL"){case"svg":o=yield g.toString(t,f(r({},i),{type:"svg"}));break;case"utf8":o=yield g.toString(t,f(r({},i),{type:"utf8"}));break;case"dataURL":default:o=yield g.toDataURL(t,i);break}return{qr:o,intent:t}}catch(o){let a=o instanceof Error?o.message:"Unknown error";throw new Error(`Failed to generate QR code: ${a}`)}})}};export{h as UPIQR};
